### === Inicio de AnalyticsFilters.tsx === ###

'use client'

import { Client, TaskStatus, TaskPriority } from '@/types/types';

interface AnalyticsFiltersProps {
  dateRange: { start: string; end: string };
  setDateRange: (range: { start: string; end: string }) => void;
  statusFilter: TaskStatus | 'all';
  setStatusFilter: (status: TaskStatus | 'all') => void;
  priorityFilter: TaskPriority | 'all';
  setPriorityFilter: (priority: TaskPriority | 'all') => void;
  clientSearch: string;
  setClientSearch: (search: string) => void;
  darkMode: boolean;
}

export default function AnalyticsFilters({
  dateRange,
  setDateRange,
  statusFilter,
  setStatusFilter,
  priorityFilter,
  setPriorityFilter,
  clientSearch,
  setClientSearch,
  darkMode,
}: AnalyticsFiltersProps) {
  return (
    <div className={`p-4 rounded-lg ${darkMode ? 'bg-gray-800' : 'bg-white'} shadow mb-6`}>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        {/* Date Range Filter */}
        <div>
          <label className={`block text-sm font-medium mb-1 ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>
            Date Range
          </label>
          <div className="flex gap-2">
            <input
              type="date"
              value={dateRange.start}
              onChange={(e) => setDateRange({ ...dateRange, start: e.target.value })}
              className={`block w-full rounded-md text-sm ${
                darkMode ? 'bg-gray-700 border-gray-600' : 'bg-white border-gray-300'
              } shadow-sm`}
            />
            <span className="flex items-center">to</span>
            <input
              type="date"
              value={dateRange.end}
              onChange={(e) => setDateRange({ ...dateRange, end: e.target.value })}
              className={`block w-full rounded-md text-sm ${
                darkMode ? 'bg-gray-700 border-gray-600' : 'bg-white border-gray-300'
              } shadow-sm`}
            />
          </div>
        </div>

        {/* Status Filter */}
        <div>
          <label className={`block text-sm font-medium mb-1 ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>
            Status
          </label>
          <select
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value as TaskStatus | 'all')}
            className={`block w-full rounded-md text-sm ${
              darkMode ? 'bg-gray-700 border-gray-600' : 'bg-white border-gray-300'
            } shadow-sm`}
          >
            <option value="all">All Statuses</option>
            <option value="pending">Pending</option>
            <option value="in progress">In Progress</option>
            <option value="completed">Completed</option>
            <option value="awaiting client">Awaiting Client</option>
          </select>
        </div>

        {/* Priority Filter */}
        <div>
          <label className={`block text-sm font-medium mb-1 ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>
            Priority
          </label>
          <select
            value={priorityFilter}
            onChange={(e) => setPriorityFilter(e.target.value as TaskPriority | 'all')}
            className={`block w-full rounded-md text-sm ${
              darkMode ? 'bg-gray-700 border-gray-600' : 'bg-white border-gray-300'
            } shadow-sm`}
          >
            <option value="all">All Priorities</option>
            <option value="low">Low</option>
            <option value="medium">Medium</option>
            <option value="high">High</option>
          </select>
        </div>

        {/* Client Search */}
        <div>
          <label className={`block text-sm font-medium mb-1 ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>
            Search Client
          </label>
          <input
            type="text"
            value={clientSearch}
            onChange={(e) => setClientSearch(e.target.value)}
            placeholder="Search by name or company"
            className={`block w-full rounded-md text-sm ${
              darkMode ? 'bg-gray-700 border-gray-600' : 'bg-white border-gray-300'
            } shadow-sm`}
          />
        </div>
      </div>

      {/* Clear Filters Button */}
      <div className="mt-4 flex justify-end">
        <button
          onClick={() => {
            setDateRange({ start: '', end: '' });
            setStatusFilter('all');
            setPriorityFilter('all');
            setClientSearch('');
          }}
          className={`px-4 py-2 text-sm rounded-md ${
            darkMode ? 'bg-gray-700 hover:bg-gray-600' : 'bg-gray-200 hover:bg-gray-300'
          }`}
        >
          Clear All Filters
        </button>
      </div>
    </div>
  );
} 

### === Fim de AnalyticsFilters.tsx === ###


### === Inicio de CompletionRateChart.tsx === ###

'use client'

import { useState, useMemo } from 'react';
import { Client } from '@/types/types';
import { Bar } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
  Scale,
} from 'chart.js';

ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend
);

interface CompletionRateChartProps {
  clients: Client[];
  darkMode: boolean;
}

export default function CompletionRateChart({ clients, darkMode }: CompletionRateChartProps) {
  const [searchTerm, setSearchTerm] = useState('');
  const [sortBy, setSortBy] = useState<'name' | 'rate' | 'tasks'>('rate');
  const [showAll, setShowAll] = useState(false);

  // Filter and sort clients
  const processedData = useMemo(() => {
    // Calculate completion rates for all clients
    const clientData = clients.map(client => {
      const totalTasks = client.tasks.length;
      const completedTasks = client.tasks.filter(task => task.status === 'completed').length;
      const completionRate = totalTasks > 0 ? (completedTasks / totalTasks) * 100 : 0;
      
      return {
        id: client.id,
        name: client.name,
        company: client.company,
        totalTasks,
        completedTasks,
        completionRate,
        displayName: `${client.name} (${client.company})`
      };
    });

    // Filter by search term
    const filteredData = clientData.filter(client =>
      client.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      client.company.toLowerCase().includes(searchTerm.toLowerCase())
    );

    // Sort data
    const sortedData = [...filteredData].sort((a, b) => {
      switch (sortBy) {
        case 'name':
          return a.name.localeCompare(b.name);
        case 'rate':
          return b.completionRate - a.completionRate;
        case 'tasks':
          return b.totalTasks - a.totalTasks;
        default:
          return 0;
      }
    });

    // Limit display if showAll is false
    const displayData = showAll ? sortedData : sortedData.slice(0, 10);

    return { sortedData, displayData, totalCount: filteredData.length };
  }, [clients, searchTerm, sortBy, showAll]);

  const chartData = {
    labels: processedData.displayData.map(client => {
      const maxLength = 25;
      return client.displayName.length > maxLength 
        ? client.displayName.substring(0, maxLength) + '...'
        : client.displayName;
    }),
    datasets: [
      {
        label: 'Completion Rate (%)',
        data: processedData.displayData.map(client => client.completionRate),
        backgroundColor: processedData.displayData.map(client => {
          if (client.completionRate >= 90) return 'rgba(34, 197, 94, 0.8)'; // Green
          if (client.completionRate >= 70) return 'rgba(234, 179, 8, 0.8)'; // Yellow
          if (client.completionRate >= 50) return 'rgba(249, 115, 22, 0.8)'; // Orange
          return 'rgba(239, 68, 68, 0.8)'; // Red
        }),
        borderColor: darkMode ? 'rgba(31, 41, 55, 1)' : 'white',
        borderWidth: 1,
      },
    ],
  };

  const chartOptions = {
    indexAxis: 'y' as const,
    responsive: true,
    maintainAspectRatio: false,
    scales: {
      x: {
        beginAtZero: true,
        max: 100,
        ticks: {
          color: darkMode ? 'white' : 'black',
          callback: function(value: any) {
            return value + '%';
          }
        },
        grid: {
          color: darkMode ? 'rgba(75, 85, 99, 0.3)' : 'rgba(209, 213, 219, 0.3)',
        },
      },
      y: {
        ticks: {
          color: darkMode ? 'white' : 'black',
          font: {
            size: 11,
          },
        },
        grid: {
          display: false,
        },
      },
    },
    plugins: {
      legend: {
        position: 'top' as const,
        labels: {
          color: darkMode ? 'white' : 'black',
          padding: 20,
        },
      },
      tooltip: {
        backgroundColor: darkMode ? 'rgba(31, 41, 55, 0.9)' : 'rgba(255, 255, 255, 0.9)',
        titleColor: darkMode ? 'white' : 'black',
        bodyColor: darkMode ? 'white' : 'black',
        borderColor: darkMode ? 'rgba(75, 85, 99, 1)' : 'rgba(209, 213, 219, 1)',
        borderWidth: 1,
        callbacks: {
          title: function(context: any) {
            const dataIndex = context[0].dataIndex;
            return processedData.displayData[dataIndex]?.displayName || '';
          },
          label: function(context: any) {
            const dataIndex = context.dataIndex;
            const client = processedData.displayData[dataIndex];
            return [
              `Completion Rate: ${client.completionRate.toFixed(1)}%`,
              `Completed Tasks: ${client.completedTasks}`,
              `Total Tasks: ${client.totalTasks}`
            ];
          }
        }
      },
    },
  };

  // Calculate dynamic height based on number of items
  const heightPerItem = 35;
  const minHeight = 300;
  const dynamicHeight = Math.max(minHeight, processedData.displayData.length * heightPerItem + 100);

  return (
    <div className="space-y-4">
      {/* Controls */}
      <div className="flex flex-col sm:flex-row gap-4 items-start sm:items-center">
        {/* Search */}
        <div className="flex-1">
          <input
            type="text"
            placeholder="Search clients by name or company..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className={`w-full p-2 rounded border ${
              darkMode 
                ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400' 
                : 'bg-white border-gray-300 placeholder-gray-500'
            }`}
          />
        </div>

        {/* Sort */}
        <div className="flex items-center gap-2">
          <label className={`text-sm font-medium ${darkMode ? 'text-gray-300' : 'text-gray-700'}`}>
            Sort by:
          </label>
          <select
            value={sortBy}
            onChange={(e) => setSortBy(e.target.value as 'name' | 'rate' | 'tasks')}
            className={`p-2 rounded border text-sm ${
              darkMode 
                ? 'bg-gray-700 border-gray-600 text-white' 
                : 'bg-white border-gray-300'
            }`}
          >
            <option value="rate">Completion Rate</option>
            <option value="name">Client Name</option>
            <option value="tasks">Total Tasks</option>
          </select>
        </div>

        {/* Show All Toggle */}
        {processedData.totalCount > 10 && (
          <button
            onClick={() => setShowAll(!showAll)}
            className={`px-3 py-2 text-sm rounded ${
              darkMode 
                ? 'bg-blue-600 hover:bg-blue-700 text-white' 
                : 'bg-blue-500 hover:bg-blue-600 text-white'
            }`}
          >
            {showAll ? 'Show Top 10' : `Show All (${processedData.totalCount})`}
          </button>
        )}
      </div>

      {/* Results Info */}
      <div className={`text-sm ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>
        Showing {processedData.displayData.length} of {processedData.totalCount} clients
        {searchTerm && ` matching "${searchTerm}"`}
      </div>

      {/* Chart */}
      <div 
        className={`p-4 rounded-lg ${darkMode ? 'bg-gray-700' : 'bg-gray-50'} overflow-auto`}
        style={{ height: `${dynamicHeight}px` }}
      >
        {processedData.displayData.length > 0 ? (
          <Bar data={chartData} options={chartOptions} />
        ) : (
          <div className={`flex items-center justify-center h-full ${darkMode ? 'text-gray-400' : 'text-gray-500'}`}>
            <div className="text-center">
              <p className="text-lg mb-2">No clients found</p>
              <p className="text-sm">Try adjusting your search terms</p>
            </div>
          </div>
        )}
      </div>

      {/* Summary Stats */}
      {processedData.displayData.length > 0 && (
        <div className="grid grid-cols-2 sm:grid-cols-4 gap-4 text-center">
          <div className={`p-3 rounded ${darkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>
            <div className={`text-lg font-bold ${darkMode ? 'text-green-400' : 'text-green-600'}`}>
              {processedData.displayData.filter(c => c.completionRate >= 90).length}
            </div>
            <div className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>
              ≥90% Complete
            </div>
          </div>
          <div className={`p-3 rounded ${darkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>
            <div className={`text-lg font-bold ${darkMode ? 'text-yellow-400' : 'text-yellow-600'}`}>
              {processedData.displayData.filter(c => c.completionRate >= 70 && c.completionRate < 90).length}
            </div>
            <div className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>
              70-89% Complete
            </div>
          </div>
          <div className={`p-3 rounded ${darkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>
            <div className={`text-lg font-bold ${darkMode ? 'text-orange-400' : 'text-orange-600'}`}>
              {processedData.displayData.filter(c => c.completionRate >= 50 && c.completionRate < 70).length}
            </div>
            <div className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>
              50-69% Complete
            </div>
          </div>
          <div className={`p-3 rounded ${darkMode ? 'bg-gray-700' : 'bg-gray-100'}`}>
            <div className={`text-lg font-bold ${darkMode ? 'text-red-400' : 'text-red-600'}`}>
              {processedData.displayData.filter(c => c.completionRate < 50).length}
            </div>
            <div className={`text-xs ${darkMode ? 'text-gray-400' : 'text-gray-600'}`}>
              &lt;50% Complete
            </div>
          </div>
        </div>
      )}
    </div>
  );
} 

### === Fim de CompletionRateChart.tsx === ###


### === Inicio de page.tsx === ###

'use client'

import { useState, useEffect } from 'react';
import AnalyticsDashboard from '../components/AnalyticsDashboard';
import { Client } from '@/types/types';
import { api } from '@/services/api';
import { useDarkMode } from '../layout';

export default function AnalyticsPage() {
  const [clients, setClients] = useState<Client[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [selectedClients, setSelectedClients] = useState<string[]>([]);
  const [analyticsDateRange, setAnalyticsDateRange] = useState<{
    start?: Date;
    end?: Date;
  }>({});

  // Use dark mode from layout context
  const { darkMode } = useDarkMode();

  const fetchClients = async () => {
    try {
      const data = await api.getClients();
      setClients(data);
      setError(null);
    } catch (err) {
      setError('Failed to fetch clients');
      console.error('Error fetching clients:', err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchClients();
  }, []);

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-xl">Loading...</div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="text-xl text-red-500">{error}</div>
      </div>
    );
  }

  return (
    <div className={`min-h-screen ${darkMode ? 'bg-gray-900 text-white' : 'bg-gray-100 text-gray-900'}`}>
      <div className="container mx-auto px-4 py-8">
        {/* Simplified Header - removed "Back to Dashboard" button */}
        <div className="mb-6">
          <h1 className="text-3xl font-bold">Analytics Dashboard</h1>
        </div>

        <AnalyticsDashboard
          clients={clients}
          startDate={analyticsDateRange.start}
          endDate={analyticsDateRange.end}
          selectedClients={selectedClients}
          onDateRangeChange={(start, end) => setAnalyticsDateRange({ start, end })}
          onClientSelect={setSelectedClients}
          darkMode={darkMode}
        />
      </div>
    </div>
  );
} 

### === Fim de page.tsx === ###


### === Inicio de TaskPriorityChart.tsx === ###

'use client'

import { Task } from '@/types/types';
import { Bar } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
} from 'chart.js';

ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend
);

interface TaskPriorityChartProps {
  tasks: Task[];
  darkMode: boolean;
}

export default function TaskPriorityChart({ tasks, darkMode }: TaskPriorityChartProps) {
  const priorityCounts = {
    high: tasks.filter(task => task.priority === 'high').length,
    medium: tasks.filter(task => task.priority === 'medium').length,
    low: tasks.filter(task => task.priority === 'low').length,
  };

  const data = {
    labels: ['High', 'Medium', 'Low'],
    datasets: [
      {
        label: 'Tasks by Priority',
        data: Object.values(priorityCounts),
        backgroundColor: [
          'rgba(239, 68, 68, 0.8)',  // Red for high
          'rgba(234, 179, 8, 0.8)',   // Yellow for medium
          'rgba(59, 130, 246, 0.8)',  // Blue for low
        ],
        borderColor: darkMode ? 'rgba(31, 41, 55, 1)' : 'white',
        borderWidth: 2,
      },
    ],
  };

  const options = {
    responsive: true,
    scales: {
      y: {
        beginAtZero: true,
        ticks: {
          color: darkMode ? 'white' : 'black',
        },
        grid: {
          color: darkMode ? 'rgba(75, 85, 99, 0.3)' : 'rgba(209, 213, 219, 0.3)',
        },
      },
      x: {
        ticks: {
          color: darkMode ? 'white' : 'black',
        },
        grid: {
          display: false,
        },
      },
    },
    plugins: {
      legend: {
        display: false,
      },
      tooltip: {
        backgroundColor: darkMode ? 'rgba(31, 41, 55, 0.8)' : 'rgba(255, 255, 255, 0.8)',
        titleColor: darkMode ? 'white' : 'black',
        bodyColor: darkMode ? 'white' : 'black',
        borderColor: darkMode ? 'rgba(75, 85, 99, 1)' : 'rgba(209, 213, 219, 1)',
        borderWidth: 1,
      },
    },
  };

  return (
    <div className="w-full h-[300px] flex items-center justify-center">
      <Bar data={data} options={options} />
    </div>
  );
} 

### === Fim de TaskPriorityChart.tsx === ###


### === Inicio de TasksPerClientChart.tsx === ###

'use client'

import { Client } from '@/types/types';
import { Bar } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend,
  Scale,
} from 'chart.js';

ChartJS.register(
  CategoryScale,
  LinearScale,
  BarElement,
  Title,
  Tooltip,
  Legend
);

interface TasksPerClientChartProps {
  clients: Client[];
  darkMode: boolean;
}

export default function TasksPerClientChart({ clients, darkMode }: TasksPerClientChartProps) {
  // Sort clients by number of tasks (descending)
  const sortedClients = [...clients].sort((a, b) => b.tasks.length - a.tasks.length);

  const data = {
    labels: sortedClients.map(client => `${client.name} (${client.company})`),
    datasets: [
      {
        label: 'Total Tasks',
        data: sortedClients.map(client => client.tasks.length),
        backgroundColor: 'rgba(59, 130, 246, 0.8)', // Blue
        borderColor: darkMode ? 'rgba(31, 41, 55, 1)' : 'white',
        borderWidth: 2,
      },
      {
        label: 'Completed Tasks',
        data: sortedClients.map(client => 
          client.tasks.filter(task => task.status === 'completed').length
        ),
        backgroundColor: 'rgba(34, 197, 94, 0.8)', // Green
        borderColor: darkMode ? 'rgba(31, 41, 55, 1)' : 'white',
        borderWidth: 2,
      }
    ],
  };

  const options = {
    indexAxis: 'y' as const,
    responsive: true,
    maintainAspectRatio: false,
    scales: {
      x: {
        beginAtZero: true,
        stacked: false,
        ticks: {
          color: darkMode ? 'white' : 'black',
          stepSize: 1,
        },
        grid: {
          color: darkMode ? 'rgba(75, 85, 99, 0.3)' : 'rgba(209, 213, 219, 0.3)',
        },
      },
      y: {
        stacked: false,
        ticks: {
          color: darkMode ? 'white' : 'black',
          font: {
            size: 12,
          },
          callback: function(this: Scale<any>, value: number | string) {
            const label = data.labels?.[value as number];
            const maxLength = 30;
            if (typeof label === 'string' && label.length > maxLength) {
              return label.substring(0, maxLength) + '...';
            }
            return label || '';
          }
        },
        grid: {
          display: false,
        },
      },
    },
    plugins: {
      legend: {
        position: 'top' as const,
        labels: {
          color: darkMode ? 'white' : 'black',
          padding: 20,
        },
      },
      tooltip: {
        backgroundColor: darkMode ? 'rgba(31, 41, 55, 0.8)' : 'rgba(255, 255, 255, 0.8)',
        titleColor: darkMode ? 'white' : 'black',
        bodyColor: darkMode ? 'white' : 'black',
        borderColor: darkMode ? 'rgba(75, 85, 99, 1)' : 'rgba(209, 213, 219, 1)',
        borderWidth: 1,
      },
    },
  };

  // Calculate height based on number of clients (40px per client + padding)
  const heightPerClient = 40;
  const dynamicHeight = Math.max(300, clients.length * heightPerClient);

  return (
    <div className={`overflow-y-auto ${darkMode ? 'scrollbar-dark' : 'scrollbar-light'}`} 
         style={{ 
           maxHeight: '500px',
           // Add custom scrollbar styles
           scrollbarWidth: 'thin',
           scrollbarColor: darkMode ? '#4B5563 #1F2937' : '#D1D5DB #F3F4F6',
         }}>
      <div style={{ height: `${dynamicHeight}px`, width: '100%', minHeight: '300px' }}>
        <Bar data={data} options={options} />
      </div>
    </div>
  );
} 

### === Fim de TasksPerClientChart.tsx === ###


### === Inicio de TaskStatusChart.tsx === ###

'use client'

import { Task } from '@/types/types';
import { Pie } from 'react-chartjs-2';
import { Chart as ChartJS, ArcElement, Tooltip, Legend } from 'chart.js';

ChartJS.register(ArcElement, Tooltip, Legend);

interface TaskStatusChartProps {
  tasks: Task[];
  darkMode: boolean;
}

export default function TaskStatusChart({ tasks, darkMode }: TaskStatusChartProps) {
  const statusCounts = {
    pending: tasks.filter(task => task.status === 'pending').length,
    'in progress': tasks.filter(task => task.status === 'in progress').length,
    completed: tasks.filter(task => task.status === 'completed').length,
    'awaiting client': tasks.filter(task => task.status === 'awaiting client').length,
  };

  const data = {
    labels: Object.keys(statusCounts).map(status => 
      status.charAt(0).toUpperCase() + status.slice(1)
    ),
    datasets: [
      {
        data: Object.values(statusCounts),
        backgroundColor: [
          'rgba(239, 68, 68, 0.8)',  // Red for pending
          'rgba(234, 179, 8, 0.8)',   // Yellow for in progress
          'rgba(34, 197, 94, 0.8)',   // Green for completed
          'rgba(59, 130, 246, 0.8)',  // Blue for awaiting client
        ],
        borderColor: darkMode ? 'rgba(31, 41, 55, 1)' : 'white',
        borderWidth: 2,
      },
    ],
  };

  const options = {
    responsive: true,
    plugins: {
      legend: {
        position: 'bottom' as const,
        labels: {
          color: darkMode ? 'white' : 'black',
          padding: 20,
        },
      },
      tooltip: {
        backgroundColor: darkMode ? 'rgba(31, 41, 55, 0.8)' : 'rgba(255, 255, 255, 0.8)',
        titleColor: darkMode ? 'white' : 'black',
        bodyColor: darkMode ? 'white' : 'black',
        borderColor: darkMode ? 'rgba(75, 85, 99, 1)' : 'rgba(209, 213, 219, 1)',
        borderWidth: 1,
      },
    },
  };

  return (
    <div className="w-full h-[300px] flex items-center justify-center">
      <Pie data={data} options={options} />
    </div>
  );
} 

### === Fim de TaskStatusChart.tsx === ###


### === Inicio de TaskTimeline.tsx === ###

'use client'

import { Task } from '@/types/types';
import { Line } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
} from 'chart.js';

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend
);

interface TaskTimelineProps {
  tasks: Task[];
  darkMode: boolean;
}

export default function TaskTimeline({ tasks, darkMode }: TaskTimelineProps) {
  // Sort tasks by date
  const sortedTasks = [...tasks].sort((a, b) => 
    new Date(a.date).getTime() - new Date(b.date).getTime()
  );

  // Group tasks by date
  const tasksByDate = sortedTasks.reduce((acc, task) => {
    const date = task.date;
    if (!acc[date]) {
      acc[date] = { total: 0, completed: 0 };
    }
    acc[date].total++;
    if (task.status === 'completed') {
      acc[date].completed++;
    }
    return acc;
  }, {} as Record<string, { total: number; completed: number }>);

  const dates = Object.keys(tasksByDate);
  const totalTasks = dates.map(date => tasksByDate[date].total);
  const completedTasks = dates.map(date => tasksByDate[date].completed);

  const data = {
    labels: dates,
    datasets: [
      {
        label: 'Total Tasks',
        data: totalTasks,
        borderColor: 'rgba(59, 130, 246, 0.8)',
        backgroundColor: 'rgba(59, 130, 246, 0.2)',
        fill: true,
        tension: 0.4,
      },
      {
        label: 'Completed Tasks',
        data: completedTasks,
        borderColor: 'rgba(34, 197, 94, 0.8)',
        backgroundColor: 'rgba(34, 197, 94, 0.2)',
        fill: true,
        tension: 0.4,
      },
    ],
  };

  const options = {
    responsive: true,
    scales: {
      y: {
        beginAtZero: true,
        ticks: {
          color: darkMode ? 'white' : 'black',
          stepSize: 1,
        },
        grid: {
          color: darkMode ? 'rgba(75, 85, 99, 0.3)' : 'rgba(209, 213, 219, 0.3)',
        },
      },
      x: {
        ticks: {
          color: darkMode ? 'white' : 'black',
        },
        grid: {
          color: darkMode ? 'rgba(75, 85, 99, 0.3)' : 'rgba(209, 213, 219, 0.3)',
        },
      },
    },
    plugins: {
      legend: {
        position: 'top' as const,
        labels: {
          color: darkMode ? 'white' : 'black',
        },
      },
      tooltip: {
        backgroundColor: darkMode ? 'rgba(31, 41, 55, 0.8)' : 'rgba(255, 255, 255, 0.8)',
        titleColor: darkMode ? 'white' : 'black',
        bodyColor: darkMode ? 'white' : 'black',
        borderColor: darkMode ? 'rgba(75, 85, 99, 1)' : 'rgba(209, 213, 219, 1)',
        borderWidth: 1,
      },
    },
  };

  return (
    <div className="w-full h-[400px] flex items-center justify-center">
      <Line data={data} options={options} />
    </div>
  );
} 

### === Fim de TaskTimeline.tsx === ###


